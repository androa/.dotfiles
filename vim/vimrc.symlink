" Enable filetype detection
filetype on
" Load plugin files for each filetype (.vim/after/ftplugin/*.vim)
filetype plugin on
" Load indent file for each filetype (.vim/after/indent/*.vim)
filetype plugin indent on

" Enable syntax highlighting
syntax enable

" Load vim-plug
call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'
Plug 'kien/ctrlp.vim'
Plug 'easymotion/vim-easymotion'

Plug 'bling/vim-airline'
Plug 'tpope/vim-sleuth' " Indent autodetector
Plug 'tpope/vim-surround' " Surround (parantheses, quotes, etc)

Plug 'tpope/vim-fugitive' " Git Awesomesauce Plugin
" Plug 'scrooloose/nerdcommenter' " Orgasmic commenting

Plug 'joonty/vdebug', { 'on': 'VdebugStart' } " GDB debugger

Plug 'sjl/gundo.vim'

Plug 'tpope/vim-markdown', { 'for': 'markdown' } " Markdown Syntax

Plug 'junegunn/vim-easy-align' " Align lines on chars

Plug 'scroolose/syntastic'

call plug#end()

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Remove all unwanted whitespaces on save
autocmd BufWritePre * :%s/\r\+$//e " Windows newlines
autocmd BufWritePre * :%s/\s\+$//e

" Rebind <leader>
let mapleader = "\<Space>"

" Turn on line numbers
set relativenumber

" Indent the next line similiar to current line
set autoindent
" Use same indentation characters as current line
set copyindent
" Use spaces instead of tabs for indentation
set expandtab
" Round all indentations to multiple of shiftwidth
set shiftround
" Use 4 spaces for indentation
"set shiftwidth=4
" Set tabs to be equivalent to 4 spaces (fixes retab)
"set tabstop=4

" Long lines handling
set wrap
set textwidth=80
set formatoptions=qrn1t
set colorcolumn=+1,+20

" Display ruler with current possition
set ruler

" Display statusline
set laststatus=2

" Set how many lines that should be displayed above/under cursor
set scrolloff=7

" Show hidden unwanted characters
set list
set listchars=tab:►\ ,trail:·,nbsp:□

" Hightlight paired brackets
set showmatch

" Highlight all matches for a search
set hlsearch
" Search as you type
set incsearch
" Replace all occurences on each line
set gdefault
" Only search case sensitive if a letter is uppercase
set ignorecase
set smartcase

" Increase history and amount of undos to 1000
set history=1000
set undolevels=1000

" Create undo files
set undofile
set undodir=$HOME/.vim/undo
set undoreload=10000

" Don't create backup or swap files
set nobackup
set noswapfile

" Enable wildmenu (inline file explorer in command line)
set wildmenu
set wildmode=list:longest,full

" Update window title with path to open file
set title

" Adjust bells to avoid sound, visual only
set visualbell
set noerrorbells

" Map shift+h/shift+l for navigate between tabs
map <S-h> gT
map <S-l> gt

" Allow opening of more files in tabs with -p
set tabpagemax=50

" Replace a word with last yanked text
nmap <leader>r "_diwP

" Toggle line numbers on/off
map <leader>l :call ToggleLineNumberingStyle()<CR>
function! ToggleLineNumberingStyle()
    if &number
        set relativenumber
    else
        set number
    endif
endfunction

" Toggle paste mode
map <leader>p :set invpaste<CR>

" Open files with <Leader>o
nnoremap <Leader>o :CtrlP<CR>

" Save files with <Leader>w
nnoremap <Leader>w :w<CR>

" Close with <Leader>q
nnoremap <Leader>q :q<CR>

" Remove the record window
nnoremap q: :q<CR>

" Start Vdebug
nnoremap <F5> :VdebugStart<CR>

" Setup Gundo
nnoremap <Leader><Leader>u :GundoToggle<CR>

" Setup EasyAlign
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Shortkeys for handling buffers
nmap <Leader>t :enew<CR>
nmap <Leader>l :bnext<CR>
nmap <Leader>h :bprevious<CR>
nmap <Leader>bq :bp <BAR> bd #<CR> " Close buffer
nmap <Leader>bl :ls<CR> " List buffers

noremap <S-l> :bnext<CR>
noremap <S-h> :bprevious<CR>

let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
    let g:ctrlp_prompt_mappings = {
                \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
                \ }
endif

" Configure solarized to 256 color terminal with dark background
set background=dark
set t_Co=256
let g:solarized_termcolors=256
let g:solarized_contrast="high"
colorscheme solarized

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

" Configure PDV
let g:pdv_cfg_Author = "André Roaldseth <andrer@vg.no>"
let g:pdv_cfg_php4always = 0 " Turn of @access, etc

" Configure vdebug to run on an available port
let g:vdebug_options = { "port" : 11016 }

" Set the codesniffer args
let g:phpqa_codesniffer_args = "--standard=PSR2"

" Set up write with sudo shortcut
cmap w!! w !sudo tee > /dev/null %



set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
